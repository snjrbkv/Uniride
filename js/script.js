const filterItems = document.querySelectorAll(".filters__list li");
const selectedFilters = document.getElementById("selectedFilters");

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ localStorage
function saveFilters() {
  const values = [...selectedFilters.children].map(
    (chip) => chip.dataset.value
  );
  localStorage.setItem("selectedFilters", JSON.stringify(values));
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∏–ø–∞
function createChip(value) {
  const chip = document.createElement("div");
  chip.classList.add("selected-filters__chip");
  chip.dataset.value = value;
  chip.innerHTML = `${value} <button>&times;</button>`;

  // —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É
  chip.querySelector("button").addEventListener("click", () => {
    chip.remove();
    saveFilters(); // –æ–±–Ω–æ–≤–ª—è–µ–º localStorage
  });

  selectedFilters.appendChild(chip);
}

// –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
function restoreFilters() {
  const saved = JSON.parse(localStorage.getItem("selectedFilters")) || [];
  saved.forEach((value) => createChip(value));
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º —Å–≤–µ—Ä—Ö—É
filterItems.forEach((item) => {
  item.addEventListener("click", () => {
    const value = item.textContent.trim();

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    if (
      ![...selectedFilters.children].some(
        (chip) => chip.dataset.value === value
      )
    ) {
      createChip(value);
      saveFilters();
    }
  });
});

// –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
restoreFilters();
fetch("js/data.json")
  .then((res) => {
    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
    return res.json();
  })
  .then((data) => {
    console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data);

    const container = document.getElementById("cards-container");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #cards-container –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    // –ø—Ä–æ—Ö–æ–¥–∏–º –∏–º–µ–Ω–Ω–æ –ø–æ data.list
    data.list.forEach((company) => {
      // –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
      const card = document.createElement("div");
      card.classList.add("company-card");

      card.innerHTML = `
        <div class="company-card__logo"></div>
        <div class="company-card__icon">T</div>
        <h3>${company["–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"] || "–ö–æ–º–ø–∞–Ω–∏—è"}</h3>
        <div class="company-card__field">üíº ${
          company["–°—Ñ–µ—Ä–∞"] || "–°—Ñ–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        }</div>
        <div class="company-card__location">üìç ${
          company["–õ–æ–∫–∞—Ü–∏—è"] || "–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        }</div>
        <div class="company-card__footer">
          <span class="company-card__vacancies">${
            company["–í–∞–∫–∞–Ω—Å–∏–∏"] || 0
          } –≤–∞–∫–∞–Ω—Å–∏–π</span>
          <a href="#" class="company-card__btn">–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å</a>
        </div>
      `;

      // –≤–∞–∫–∞–Ω—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –º–∞—Å—Å–∏–≤)
      if (company._nc_m2m_Uniride_–í–∞–∫–∞–Ω—Å–∏–∏s?.length) {
        const jobsList = document.createElement("ul");
        company._nc_m2m_Uniride_–í–∞–∫–∞–Ω—Å–∏–∏s.forEach((job) => {
          const li = document.createElement("li");
          li.textContent = `${job["–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"]} (${job["–ó–∞—Ä–ø–ª–∞—Ç–∞"]})`;
          jobsList.appendChild(li);
        });
        card.appendChild(jobsList);
      }

      container.appendChild(card);
    });
  })
  .catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", err);
  });
